services:
  # NCA Toolkit (Media Processing API)
  ncat-media-toolkit:
    build: .
    env_file:
      - .env.full-stack
    ports:
      - "8080:8080"
    volumes:
      - storage:/app/storage
      - logs:/app/logs
      - ./shared-files/ffmpeg-input:/app/ffmpeg-input
      - ./shared-files/ffmpeg-output:/app/ffmpeg-output
    restart: unless-stopped
    depends_on:
      - minio
      - minio-init
      - n8n-postgres
    networks:
      - full-stack-network
    environment:
      - FFMPEG_INPUT_PATH=/app/ffmpeg-input
      - FFMPEG_OUTPUT_PATH=/app/ffmpeg-output

  # MinIO S3-Compatible Storage
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
      - ./shared-files/ffmpeg-input:/data/ffmpeg-input
      - ./shared-files/ffmpeg-output:/data/ffmpeg-output
    restart: unless-stopped
    networks:
      - full-stack-network

  # MinIO Bucket Initialization
  minio-init:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/nca-toolkit-local --ignore-existing;
      /usr/bin/mc mb myminio/ffmpeg-input --ignore-existing;
      /usr/bin/mc mb myminio/ffmpeg-output --ignore-existing;
      /usr/bin/mc anonymous set public myminio/nca-toolkit-local;
      /usr/bin/mc anonymous set public myminio/ffmpeg-input;
      /usr/bin/mc anonymous set public myminio/ffmpeg-output;
      echo 'MinIO buckets created and configured as public';
      "
    networks:
      - full-stack-network

  # n8n Workflow Automation (with FFmpeg)
  n8n-app:
    image: docker.n8n.io/n8nio/n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
      - N8N_SECURE_COOKIE=false
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n-postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=n8n123
    volumes:
      - n8n_data:/home/node/.n8n
      - ./shared-files:/files
      - ./shared-files/ffmpeg-input:/files/ffmpeg-input
      - ./shared-files/ffmpeg-output:/files/ffmpeg-output
    depends_on:
      - n8n-postgres
    networks:
      - full-stack-network
    # Install FFmpeg in n8n container
    user: root
    command: >
      /bin/sh -c "
      apt-get update && 
      apt-get install -y ffmpeg &&
      su node -c 'n8n start'
      "

  # PostgreSQL Database for n8n
  n8n-postgres:
    image: postgres:15
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: n8n123
      POSTGRES_DB: n8n
      POSTGRES_NON_ROOT_USER: n8n
      POSTGRES_NON_ROOT_PASSWORD: n8n123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - full-stack-network

  # Ollama CPU (AI/LLM Processing)
  ollama-cpu:
    image: ollama/ollama:latest
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ./shared-files:/shared-files
    networks:
      - full-stack-network
    environment:
      - OLLAMA_HOST=0.0.0.0
    # Preload a lightweight model
    entrypoint: >
      /bin/sh -c "
      ollama serve &
      sleep 10 &&
      ollama pull llama3.2:1b &&
      wait
      "

volumes:
  storage:
    driver: local
  logs:
    driver: local
  minio_data:
    driver: local
  n8n_data:
    driver: local
  postgres_data:
    driver: local
  ollama_data:
    driver: local

networks:
  full-stack-network:
    driver: bridge